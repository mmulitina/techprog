#include <iostream>
using namespace std;

class vect {
public:
   static int count;
    int dim, num;
    double* a;


    vect(int k) {
        dim = k;
        num = count++;
        a = new double[k];
        for (int i = 0; i < dim; i++) {
            a[i] = 0;
        }

    }
  
    ~vect() {
        delete[] a;
        a = nullptr; 
        count--;    

    }

    vect& operator=(const vect& diff) {
        if (this != &diff) {
            delete[] a;
            dim = diff.dim;
            a = new double[dim];
            for (int i = 0; i < dim; i++) {
                a[i] = diff.a[i];
            }
        }
        return *this;
    }
};

class matr {
public:
    static int count;
    int dim, num;
    double** b;


    matr(int k) {
        dim = k;
        num = count++;
        b = new double* [dim];
        for (int i = 0; i < k; i++) {
            b[i] = new double[dim]();
        }
    }


    ~matr() {
        for (int i = 0; i < dim; ++i) {
            delete[] b[i];
        }
        delete[] b;

        count--;
    }

    matr& operator=(const matr& diff) {
        if (this != &diff) {
            for (int i = 0; i < dim; i++) {
                delete[] b[i];
            }
            delete[] b;

            dim = diff.dim;
            b = new double* [dim];
            for (int i = 0; i < dim; i++) {
                b[i] = new double[dim];
                for (int j = 0; j < dim; j++) {
                    b[i][j] = diff.b[i][j];
                }
            }
        }
        return *this;
    }
};

vect operator+(const vect& v1, const vect& v2) {
    vect res(v1.dim); 
    for (int i = 0; i < v1.dim; i++) {
        res.a[i] = v1.a[i] + v2.a[i]; 
    }

    return res;
}

vect operator-(const vect& v1, const vect& v2) {
    vect res(v1.dim);
    for (int i = 0; i < v1.dim; i++) {
        res.a[i] = v1.a[i] - v2.a[i];
    }

    return res;
}

vect operator*(const vect& v1, const vect& v2) {
    vect res(v1.dim);
    for (int i = 0; i < v1.dim; i++) {
        res.a[i] = v1.a[i] * v2.a[i];
    }

    return res;
}

vect operator*(const vect& v1, const int& k) {
    vect res(v1.dim);
    for (int i = 0; i < v1.dim; i++) {
        res.a[i] = v1.a[i] * k;
    }

    return res;
}

vect operator*(const int& k, const vect& v1) {
    vect res(v1.dim);
    for (int i = 0; i < v1.dim; i++) {
        res.a[i] = v1.a[i] * k;
    }

    return res;
}

int vect::count = 1;



int matr::count = 1;
matr operator+(const matr& v1, const matr& v2) {
    matr res(v1.dim);
    for (int i = 0; i < v1.dim; i++) {
        for (int j = 0; j < v1.dim; j++) {
            res.b[i][j] = v1.b[i][j] + v2.b[i][j]; 
        }
    }
    return res;
}

matr operator-(const matr& v1, const matr& v2) {
    matr res(v1.dim);
    for (int i = 0; i < v1.dim; i++) {
        for (int j = 0; j < v1.dim; j++) {
            res.b[i][j] = v1.b[i][j] - v2.b[i][j];
        }
    }
    return res;
}

matr operator*(const matr& v1, const matr& v2) {
    matr res(v1.dim);
    for (int i = 0; i < v1.dim; i++) {
        for (int j = 0; j < v1.dim; j++) {
            res.b[i][j] = v1.b[i][j] * v2.b[i][j];
        }
    }
    return res;
}

matr operator*(const matr& v1, const int& k) {
    matr res(v1.dim);
    for (int i = 0; i < v1.dim; i++) {
        for (int j = 0; j < v1.dim; j++) {
            res.b[i][j] = v1.b[i][j] * k;
        }
    }
    return res;
}

matr operator*(const int& k, const matr& v1) {
    matr res(v1.dim);
    for (int i = 0; i < v1.dim; i++) {
        for (int j = 0; j < v1.dim; j++) {
            res.b[i][j] = v1.b[i][j] * k;
        }
    }
    return res;
}

vect operator*(const vect& v2, const matr& v1) {
    if (v1.dim != v2.dim) { 
        cout << "\n wrong dimensions \n";
        exit(1337);
    }
    vect res(v2.dim); 
    for (int i = 0; i < v1.dim; i++) {
        res.a[i] = 0; 
        for (int j = 0; j < v1.dim; j++) {
            res.a[i] += v1.b[i][j] * v2.a[j]; 
            
        }
    }
    
    return res;
}




int main() {
    
    vect vec1(3);
    vec1.a[0] = 1;
    vec1.a[1] = 1;
    vec1.a[2] = 1;
    vec1 = 4 * vec1;
    for (int i = 0; i < 3; i++) {
        cout << vec1.a[i] << " ";
    }
    cout << endl;
    vect vec2(3);
   
    vec2.a[0] = 1;
    vec2.a[1] = 1;
    vec2.a[2] = 1;
    
    vect vec3(3);

    vec3 = vec1 + vec2;
    
    for (int i = 0; i < 3; i++) {
        cout << vec3.a[i] << " ";
    }
    cout << endl;
    vec1 = 4 * vec1;
    for (int i = 0; i < 3; i++) {
        cout << vec1.a[i] << " ";
    }
    cout << endl;
    vec2 = vec2 * vec1;
    for (int i = 0; i < 3; i++) {
        cout << vec2.a[i] << " ";
    }
    cout << endl;

   

  
    matr matx(3);

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            matx.b[i][j] = 1;
        }
    }


    vect vec4(3);
    vec4 = vec1 * matx;
    for (int i = 0; i < vec4.dim; i++) {
        cout << vec4.a[i];
        cout << endl;
    }
    
}
